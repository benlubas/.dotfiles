vim.api.nvim_create_user_command("JestPort", function()
  ---@diagnostic disable: param-type-mismatch
  pcall(vim.cmd, [[%s/\.to\.not/.not.to/g]])
  pcall(vim.cmd, [[%s/to\.have\.text/toHaveTextContent/g]])
  pcall(vim.cmd, [[%s/\.reset()/.mockClear()/g]])
  pcall(vim.cmd, [[%s/\.returns(/.mockReturnValue(/g]])
  pcall(vim.cmd, [[%s/\.resolves(/.mockResolvedValue(/g]])
  pcall(vim.cmd, [[%s/\.rejects(/.mockRejectedValue(/g]])
  pcall(vim.cmd, [[%s/\.to\.have\.been\.called/.toHaveBeenCalled/g]])
  pcall(vim.cmd, [[%s/\.toHaveBeenCalledOnce;/.toHaveBeenCalledTimes(1);/g]])
  pcall(vim.cmd, [[%s/\.to\.have\.been\.called\.with/.toHaveBeenCalledWith/g]])
  pcall(vim.cmd, [[%s/\.toHaveBeenCalledWithMatch(\(.*\));/.toHaveBeenCalledWith(expect.objectContaining(\1));]])
  pcall(vim.cmd, [[%s/to\.have\.text/toHaveTextContent/g]])
  pcall(vim.cmd, [[%s/to\.eql(/toEqual(/g]])
  pcall(vim.cmd, [[%s/to\.eq(/toEqual(/g]])
  pcall(vim.cmd, [[%s/to\.not\.eq(/not.toEqual(/g]])
  pcall(vim.cmd, [[%s/to\.be\.null/toBeNull()/g]])
  pcall(vim.cmd, [[%s/to\.be\.false/toBe(false)/g]])
  pcall(vim.cmd, [[%s/to\.be\.true/toBe(true)/g]])
  pcall(vim.cmd, [[%s/to\.equal(/toEqual(/g]])
  pcall(vim.cmd, [[%s/to\.deep\.equal(/toEqual(/g]])
  pcall(vim.cmd, [[%s/to\.deep\.eq(/toEqual(/g]])
  pcall(vim.cmd, [[%s/to\.deep\.contain/toContainEqual/g]])
  pcall(vim.cmd, [[%s/to\.deep\.include/toContainEqual/g]])
  pcall(vim.cmd, [[%s/to\.have\.lengthOf(/toHaveLength(/g]])
  pcall(vim.cmd, [[%s/to\.have\.length(/toHaveLength(/g]])
  pcall(vim.cmd, [[%s/to\.have\.className(/toHaveClass(/g]])
  pcall(vim.cmd, [[%s/to\.have\.value(/toHaveValue(/g]])
  pcall(vim.cmd, [[%s/to\.have\.members(\[\(.*\)\]);/toContain(\1);/g]])
  pcall(vim.cmd, [[%s/to\.include(/toContain(/g]])
  pcall(vim.cmd, [[%s/toHaveBeenCalledTwice/toHaveBeenCalledTimes(2)/g]])
  pcall(vim.cmd, [[%s/toHaveBeenCalled;/toHaveBeenCalled();/g]])
  pcall(vim.cmd, [[%s/this\.sinon\.stub/jest.spyOn/g]])
  pcall(vim.cmd, [[%s/context(/describe(/g]])
  pcall(vim.cmd, [[%s/\.args\[/.mock.calls[/g]])
  pcall(vim.cmd, [[%s/function ()/() =>/g]])
  pcall(vim.cmd, [[%s/function (done)/async () =>/g]])
  pcall(vim.cmd, [[%s/this\.//g]])
  pcall(vim.cmd, [[%s/\<bubEvents\>/window.bubEvents/g]])

  if not vim.tbl_contains(vim.api.nvim_buf_get_lines(0, 0, -1, false), "import { screen } from '@testing-library/react';") then
    vim.api.nvim_buf_set_lines(0, 0, 0, false, { "import { screen } from '@testing-library/react';" })
  end
end, {})

