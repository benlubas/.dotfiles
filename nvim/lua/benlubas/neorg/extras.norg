@document.meta
title: Neorg Extras
description: Extra lua code to configure Neorg
authors: benlubas
categories: [
  neorg
  nvim
  config
]
tangle: {
  languages: {
    lua: ./extras.lua
  }
  delimiter: heading
}
created: 2024-05-03T13:36:42-0500
updated: 2024-05-10T17:35:26-0500
version: 1.1.1
@end

=TOC

* Neorg Customizations

  @code lua
  -- IMPORTANT: This file is generated (tangled) from extras.norg. Please edit that
  -- file instead of this one
  @end

  Here are my extra Neorg customizations, in a literate configuration (for fun, not
  practicality).

** Save Folds

   This code is modified from the way AstroNvim does it [here]{https://github.com/AstroNvim/AstroNvim/blob/271c9c3f71c2e315cb16c31276dec81ddca6a5a6/lua/astronvim/autocmds.lua#L98-L120}.

   It allows saving folds using the `:mkview` command on write/leave, and `:loadview`
   on win enter. This only applies to norg files.

   @code lua
   local view_group = vim.api.nvim_create_augroup("auto_view", { clear = true })
   vim.api.nvim_create_autocmd({ "BufWinLeave", "BufWritePost", "WinLeave" }, {
     desc = "Save view with mkview for real files",
     group = view_group,
     pattern = "*.norg",
     callback = function(args)
       if vim.b[args.buf].view_activated then
         vim.cmd.mkview({ mods = { emsg_silent = true } })
       end
     end,
   })

   vim.api.nvim_create_autocmd("BufWinEnter", {
     desc = "Load file view if available and enable view saving for real files",
     group = view_group,
     pattern = "*.norg",
     callback = function(args)
       if not vim.b[args.buf].view_activated then
         vim.b[args.buf].view_activated = true
         vim.cmd.loadview({ mods = { emsg_silent = true } })
       end
     end,
   })
   @end

** Templates

   I have a templating helper function, and call this method in a few different
   places.
   @code lua
   local file_exists_and_is_empty = function(filepath)
     local file = io.open(filepath, "r") -- Open the file in read mode
     if file ~= nil then
       local content = file:read("*all") -- Read the entire content of the file
       file:close()                      -- Close the file
       return content == ""              -- Check if the content is empty
     else
       return false
     end
   end

   local function template(pattern, template_name)
     vim.api.nvim_create_autocmd({ "BufNew", "BufNewFile" }, {
       desc = "Autoload template for notes/journal",
       pattern = pattern,
       callback = function(args)
         local index = "index.norg"
         vim.schedule(function()
           if vim.fn.fnamemodify(args.file, ":t") == index then
             return
           end
           if args.event == "BufNewFile"
             or (args.event == "BufNew"
             and file_exists_and_is_empty(args.file)) then
             vim.api.nvim_cmd({
               cmd = "Neorg",
               args = { "templates", "fload", template_name },
             }, {})
           end
         end)
       end,
     })
   end
   @end

** Creating New Notes

   I have two ways to create special notes, these are a new *thought*, and a *project
   note*. They're to be assigned to keybinds.

   A *thought* is supposed to be something short and self contained that I can point
   to from other places. Things that are reoccurring, sometimes things that are
   important to remember.

   *Project notes* are a single file per folder in the `~/github` folder. I keep:
   - records of old changes/challenges
   - current TODO items
   - future plans and ideas
   @code lua
   --- Create a new thought, you will be prompted for the thought's name/file
   --- path
   local function new_thought()
     vim.schedule(function()
       vim.ui.input({ default = "thoughts/" }, function(text)
         require("neorg.modules.core.dirman.module").public.create_file(text)
       end)
     end)
   end

   --- Open or create the project note for the current project
   local function project_note()
     -- get the current directory
     local cwd = vim.fn.getcwd()
     local proj_name = cwd:match("github/(.*)")
     if not proj_name then
       vim.notify("[Neorg-Projects] Not in a project.")
       return
     end
     local prefix = "~/notes/projects/" .. proj_name
     local _, exists = io.open(prefix .. ".norg", "r")
     if exists then
       vim.cmd.e(prefix .. ".norg")
     else
       require("neorg.modules.core.dirman.module").public.create_file(prefix)
     end
   end

   @end

** TODO item Continuation

   I keep TODO items in my journals. Things that I want to get done the next day, and
   I try to check off those items when I do them. If I don't do them, they should be
   carried over to the TODO items for the next day until they're canceled or marked
   done.

   /Currently, this is broken. TS is acting strange/

   *This will work:*
   @code norg
   * heading
     - ( ) items
   @end
   *This will not:*
   @code norg
   * heading

     - ( ) item
   @end

   @code lua
   local get_carryover_todos = function()
     local queryString = [[
           (heading2
             (heading2_prefix)
             title: (_)
             content: (generic_list
                        (unordered_list1
                          state: (detached_modifier_extension [
                            (todo_item_undone)
                            (todo_item_pending)
                          ])
                          content: (_)
                        ) @list
                      ))
       ]]

     local todos = {}

     local buf = { vim.api.nvim_buf_get_name(0):match("(%d%d%d%d)/(%d%d)/(%d%d)%.norg$") }
     local time = os.time({ year = buf[1], month = buf[2], day = buf[3] })
     local yesterday = os.date("%Y/%m/%d", time - 86400)
     local ws_path = require("neorg.modules.core.dirman.module").public.get_current_workspace()
     ws_path = ws_path[2]
     local yesterday_path = ws_path .. "/journal/" .. yesterday .. ".norg"
     local f = io.open(yesterday_path, "r")
     if not f then
       return {}
     end
     local content = f:read("*a")

     local parser = vim.treesitter.get_string_parser(content, "norg")
     local tree = parser:parse()[1]
     local root = tree:root()
     local lang = parser:lang()
     local query = vim.treesitter.query.parse(lang, queryString)

     local i = 0
     ---@diagnostic disable-next-line: missing-parameter
     for _, matches, _ in query:iter_matches(root, 0) do
       local m = vim.treesitter.get_node_text(matches[1], content)
       m = m:match("^.*[^\n]")
       for _, line in ipairs(vim.split(m, "\n")) do
         if i > 0 then
           line = "   " .. line   -- just hard coding the correct indent for me. idk how to dynamically set this
         end
         table.insert(todos, line)
       end
       i = i + 1
     end
     return todos
   end
   @end

** Exports

   Just exporting this stuff so I can use it in my configuration
   @code lua
   return {
     template = template,
     new_thought = new_thought,
     project_note = project_note,
     get_carryover_todos = get_carryover_todos,
   }
   @end
